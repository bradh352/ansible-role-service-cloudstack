---
- name: "APT: Install cloudstack-management"
  ansible.builtin.apt:
    pkg:
      - "cloudstack-management"
      - "cloudstack-usage"
      - "netcat-openbsd"
      - "nginx"
      - "python3-certbot"
      - "python3-certbot-nginx"
    state: latest
  notify: cloudstack_mgmt_restart

- name: "APT: Install cloudflare certbot provider"
  ansible.builtin.apt:
    pkg:
      - "python3-certbot-dns-cloudflare"
  when: cloudstack_dns_provider == "cloudflare"

- name: "Determine mariadb unix socket path"
  set_fact:
    mariadb_sock: "{{ '/var/lib/mysql/mysql.sock' if ansible_os_family == 'Redhat' else '/run/mysqld/mysqld.sock' }}"

- name: "Determine IPs that might be used to connect to DB"
  set_fact:
    cloudstack_db_src_ips: >-
      {%- set iplist = [ ] %}
      {%- for subnet in mariadb_cluster_vips %}
      {%-   for addr in ansible_facts['all_ipv4_addresses'] + ansible_facts['all_ipv6_addresses'] %}
      {%-     if addr | ansible.utils.ipaddr(subnet) is not none %}
      {%-       do iplist.append(addr) %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- iplist -}}

- name: "Determine management subnet"
  set_fact:
    cloudstack_management_subnet: "{{ (ansible_facts[cloudstack_mgmt_interface]['ipv4']['address'] ~ '/' ~ ansible_facts[cloudstack_mgmt_interface]['ipv4']['prefix']) | ansible.utils.ipaddr('subnet') }}"

- name: "Fetch network facts for other nodes"
  ansible.builtin.setup:
    gather_subset:
      - network
  delegate_to: "{{ item }}"
  delegate_facts: true
  ignore_unreachable: true
  ignore_errors: true
  with_items: "{{ groups['cloudstack_mgmt'] }}"

- name: "Determine management server ips"
  set_fact:
    cloudstack_management_ips: >-
      {%- set iplist = [ ] %}
      {%- for host in groups["cloudstack_mgmt"] %}
      {%-   for iface in hostvars[host]['ansible_interfaces'] | default([]) %}
      {%-     set iface_key = 'ansible_' ~ iface %}
      {%-     if hostvars[host][iface_key] is not defined %}
      {%-       set iface_key = iface %}
      {%-     endif %}
      {%-     if hostvars[host][iface_key]["ipv4"]["address"] is defined %}
      {%-       if hostvars[host][iface_key]["ipv4"]["address"] | ansible.utils.ipaddr(cloudstack_management_subnet) is not none %}
      {%-         do iplist.append(hostvars[host][iface_key]["ipv4"]["address"]) %}
      {%-       endif %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- iplist -}}

- name: Create database for cloudstack
  community.mysql.mysql_db:
    name: cloud
    login_unix_socket: "{{ mariadb_sock }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: true
    encoding: utf8mb4
    collation: utf8mb4_unicode_ci
    state: present
  run_once: true

- name: Create database for cloudstack usage
  community.mysql.mysql_db:
    name: cloud_usage
    login_unix_socket: "{{ mariadb_sock }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: true
    encoding: utf8mb4
    collation: utf8mb4_unicode_ci
    state: present
  run_once: true

- name: Create db user (localhost) for cloudstack
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: true
    column_case_sensitive: false
    login_unix_socket: "{{ mariadb_sock }}"
    name: "{{ cloudstack_db_user }}"
    password: "{{ cloudstack_db_password }}"
    state: present
    priv:
      'cloud.*': 'ALL,GRANT'
      'cloud_usage.*': 'ALL,GRANT'
      '*.*': 'PROCESS'
    host: "{{ item }}"
  with_items:
    - "localhost"
    - "127.0.0.1"
    - "::1"
  run_once: true

- name: Create db user (self) for cloudstack
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: true
    column_case_sensitive: false
    login_unix_socket: "{{ mariadb_sock }}"
    name: "{{ cloudstack_db_user }}"
    password: "{{ cloudstack_db_password }}"
    state: present
    priv:
      'cloud.*': 'ALL,GRANT'
      'cloud_usage.*': 'ALL,GRANT'
      '*.*': 'PROCESS'
    host: "{{ item }}"
  with_items: "{{ cloudstack_db_src_ips }}"
  throttle: 1

- name: Determine if cloudstack database is already initialized
  community.mysql.mysql_info:
    login_user: "{{ cloudstack_db_user }}"
    login_password: "{{ cloudstack_db_password }}"
    login_unix_socket: "{{ mariadb_sock }}"
    login_db: "cloud"
    filter:
    - databases
    exclude_fields: db_size
    return_empty_dbs: true
  register: cloudstack_db_info

- name: See if configuration exists
  stat:
    path: "/etc/cloudstack/management/db.properties"
  register: db_file

- name: See if this node has valid configuration
  lineinfile:
    dest: "/etc/cloudstack/management/db.properties"
    line: "{{ item }}"
  check_mode: yes
  register: db_config
  failed_when: false
  with_items:
    - "db.cloud.username={{ cloudstack_db_user }}"
    - "db.cloud.host={{ mariadb_cluster_vips[0].split('/')[0] }}"
    - "cluster.node.IP={{ ansible_facts[cloudstack_mgmt_interface]['ipv4']['address'] }}"

- name: "Ensure cloudstack services are stopped if configuration changed"
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
    - "cloudstack-management"
    - "cloudstack-usage"
  when: db_config.changed or not db_file.stat.exists or cloudstack_db_info.databases["cloud"].tables == 0

- name: Determine which node to use to set up cloudstack database
  set_fact:
    cloudstack_bootstrap_node: "{{ groups['cloudstack_mgmt'] | intersect(ansible_play_hosts) | sort | first }}"
  when: cloudstack_db_info.databases["cloud"].tables == 0

- name: Setup cloudstack database on bootstrap node
  shell: "cloudstack-setup-databases '{{ cloudstack_db_user }}:{{ cloudstack_db_password }}@{{ mariadb_cluster_vips[0].split('/')[0] }}' {{ '--schema-only --force-recreate' if cloudstack_db_info.databases['cloud'].tables == 0 else '' }} --mshost={{ ansible_facts[cloudstack_mgmt_interface]['ipv4']['address'] }} --encrypt-type=file --managementserver-secretkey='{{ cloudstack_mgmt_key }}' --database-secretkey='{{ cloudstack_db_key }}'"
  when: inventory_hostname == cloudstack_bootstrap_node|default("")
  run_once: true

- name: Generate local configuration on secondary nodes
  shell: "cloudstack-setup-databases '{{ cloudstack_db_user }}:{{ cloudstack_db_password }}@{{ mariadb_cluster_vips[0].split('/')[0] }}' --mshost={{ ansible_facts[cloudstack_mgmt_interface]['ipv4']['address'] }} --encrypt-type=file --managementserver-secretkey='{{ cloudstack_mgmt_key }}' --database-secretkey='{{ cloudstack_db_key }}'"
  when: (cloudstack_db_info.databases["cloud"].tables == 0 or db_config.changed or not db_file.stat.exists) and inventory_hostname != cloudstack_bootstrap_node|default("")

- name: "UFW: Enable Cloudstack Management Ports"
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 8080
    - 8250
    - 9090

- name: Update keepalive database parameters
  lineinfile:
    dest: "/etc/cloudstack/management/db.properties"
    regexp: "^{{ item.key }}=.*"
    line: "{{ item.key }}={{ item.val }}"
  with_items:
    - { key: "db.cloud.minIdleConnections", val: "0" } # Minimum number of idle DB connections to always hold open
    - { key: "db.usage.minIdleConnections", val: "0" }
    - { key: "db.cloud.maxIdleConnections", val: "5" } # Maximum number of idle DB connections to have open
    - { key: "db.usage.maxIdleConnections", val: "5" }
    - { key: "db.cloud.keepAliveTime", val: "15000" } # Keepalive interval for checking connection
    - { key: "db.usage.keepAliveTime", val: "15000" }
    - { key: "db.cloud.connectionTimeout", val: "30000" } # Max time will wait for connection from pool
    - { key: "db.usage.connectionTimeout", val: "30000" }
    - { key: "db.cloud.maxWait", val: "60000" } # Maximum age of connection
    - { key: "db.usage.maxWait", val: "60000" }
  notify: "{{ 'cloudstack_mgmt_restart' if not (db_config.changed or cloudstack_db_info.databases['cloud'].tables == 0) else omit }}"

- name: "Determine if cloudstack is running"
  shell: systemctl is-active cloudstack-management
  changed_when: false
  failed_when: false
  register: cloudstack_running

- name: "Determine if cloudstack is in a good state"
  shell: "curl -s -o /dev/null -L -w '%{http_code}' http://localhost:8080/"
  failed_when: false
  changed_when: false
  register: cloudstack_http_code
  when: cloudstack_running.rc == 0

- name: "Shutdown cloudstack management that is in a bad state"
  service:
    name: cloudstack-management
    state: stopped
  when: cloudstack_running.rc == 0 and cloudstack_http_code.stdout|default("503") != "200"

- name: "Bring up cloudstack management on first node"
  shell: cloudstack-setup-management
  when: inventory_hostname == cloudstack_bootstrap_node|default("")

- name: "Wait for initialization of first node"
  ansible.builtin.wait_for:
    port: 8080
    delay: 10
  when: inventory_hostname == cloudstack_bootstrap_node|default("")

- name: "Bring up cloudstack management (non-bootstrap)"
  when: (cloudstack_running.rc != 0 or cloudstack_http_code.stdout|default("503") != "200" or db_config.changed or not db_file.stat.exists or cloudstack_db_info.databases["cloud"].tables == 0) and inventory_hostname != cloudstack_bootstrap_node|default("")
  throttle: 1
  script: "cloudstack_mgmt_start.sh 1"

- name: "Link Usage Key"
  file:
    src: /etc/cloudstack/management/key
    dest: /etc/cloudstack/usage/key
    state: link

# - name: "UFW: Disable: Redirect 80 -> 8080, 443 -> 8443 -- uses Nginx now"
#   blockinfile:
#     path: /etc/ufw/before.rules
#     marker: "# {mark} ANSIBLE CLOUDSTACK MANAGED NAT RULES"
#     insertafter: "^COMMIT"
#     block: |
#       *nat
#       :PREROUTING ACCEPT [0:0]
#       -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
#       -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443
#       COMMIT
#   notify: ufw_reload

- name: "Ensure Usage server is started"
  service:
    name: cloudstack-usage
    state: started

- name: "Ensure /etc/nginx/sites-enabled/default is deleted"
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: nginx_restart

- name: "Install nginx configuration"
  template:
    src: nginx-cloudstack.j2
    dest: /etc/nginx/sites-available/cloudstack
    owner: root
    mode: "644"
  notify: nginx_restart

- name: "Nginx: enable cloudstack"
  file:
    src: /etc/nginx/sites-available/cloudstack
    dest: /etc/nginx/sites-enabled/cloudstack
    state: link
    owner: root
  notify: nginx_restart

- name: "CertBot: save cloudflare credentials"
  copy:
    dest: /etc/letsencrypt/cloudflare.ini
    content: "dns_cloudflare_api_token = '{{ cloudstack_dns_apikey }}'"
    owner: root
    mode: "600"
  when: cloudstack_dns_provider == "cloudflare"

- name: "CertBot: save godaddy credentials"
  copy:
    dest: /etc/letsencrypt/godaddy.ini
    content: 'dns_godaddy_api_token="{{ cloudstack_dns_apikey }}"'
    owner: root
    mode: "600"
  when: cloudstack_dns_provider == "godaddy"

- name: "CertBot: Godaddy: Install Scripts"
  copy:
    dest: "/usr/local/bin/{{ item }}"
    src: "{{ item }}"
    mode: "755"
    owner: root
  with_items:
    - "godaddydnsauth.sh"
    - "godaddydnsauthclean.sh"

- name: "CertBot: Detect if we need to run"
  shell: certbot certificates -d {{ cloudstack_hostname }}
  register: certbot
  changed_when: ('VALID' not in certbot.stdout)
  failed_when: false

- name: "CertBot: Cloudflare: get certificate"
  shell: "certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini -d {{ cloudstack_hostname }} --agree-tos -n -m {{ cloudstack_dns_email }} --deploy-hook 'systemctl reload nginx'"
  when: cloudstack_dns_provider == "cloudflare" and "VALID" not in certbot.stdout
  throttle: 1

- name: "CertBot: Godaddy: get certificate"
  shell: "certbot certonly --manual --preferred-challenges=dns --manual-auth-hook /usr/local/bin/godaddydnsauth.sh --manual-cleanup-hook /usr/local/bin/godaddydnsauthclean.sh -d {{ cloudstack_hostname }} --agree-tos -n -m {{ cloudstack_dns_email }} --deploy-hook 'systemctl reload nginx'"
  when: cloudstack_dns_provider == "godaddy" and "VALID" not in certbot.stdout
  throttle: 1

- name: "UFW: Enable Nginx Ports"
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 80
    - 443
