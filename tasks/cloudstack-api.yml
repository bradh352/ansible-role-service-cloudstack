---
- name: "CMK: Determine nodes which are initialized with API Keys"
  shell:  "grep ^apikey /root/.cmk/config | sed -E 's/.*=(.*)/\\1/' | sed -E 's/ //g'"
  delegate_to: "{{ item }}"
  ignore_unreachable: yes
  ignore_errors: true
  failed_when: false
  changed_when: false
  no_log: true
  register: cmk_bootstrap_nodes
  with_items: "{{ groups['cloudstack_mgmt']|unique|sort }}"

- name: "CMK: Determine which node to use for boostrapping"
  set_fact:
    cmk_bootstrap_node: >-
      {%- set eligible_hosts = [] %}
      {%- for node in cmk_bootstrap_nodes.results %}
      {%-   if node.stdout|length > 0 %}
      {%-     do eligible_hosts.append(node.item) %}
      {%-   endif %}
      {%- endfor %}
      {%- if eligible_hosts | length == 0 %}
      {%-   do eligible_hosts.append(groups['cloudstack_mgmt']|unique|sort|first) %}
      {%- endif %}
      {{- eligible_hosts[0] -}}

- name: "CMK: See if an API key is configured"
  shell:  "grep ^apikey /root/.cmk/config | sed -E 's/.*=(.*)/\\1/' | sed -E 's/ //g'"
  changed_when: false
  no_log: true
  register: cmk_has_api_key

- name: "CMK: Check to see if we need to bootstrap"
  set_fact:
    cmk_bootstrap: "{{ 'true' if cmk_has_api_key.stdout | length == 0 and inventory_hostname == cmk_bootstrap_node else 'false' }}"

- name: "CMK: Set up cloudmonkey"
  shell: "cmk sync"
  when: cmk_bootstrap

- name: "CMK: Retrieve admin user id"
  shell: "cmk list users username=admin | jq -r .user[0].id"
  register: cmk_user_id
  when: cmk_bootstrap

- name: "CMK: Generate admin API key"
  shell: "cmk register userkeys id={{ cmk_user_id.stdout }}"
  no_log: true
  register: cmk_userkeys
  when: cmk_bootstrap

- name: "CMK: Parse API Key"
  set_fact:
    cmk_api_key: "{{ cmk_userkeys.stdout | from_yaml }}"
  no_log: true
  when: cmk_bootstrap

- name: "CMK: Configure API keys"
  shell: |
    cmk set apikey {{ cmk_api_key.userkeys.apikey }}
    cmk set secretkey {{ cmk_api_key.userkeys.secretkey }}
  no_log: true
  when: cmk_bootstrap

- name: "CMK: Fetch the CMK configuration"
  shell: base64 /root/.cmk/config
  register: cmk_config_data
  when: cmk_has_api_key.stdout | length == 0 and not cmk_bootstrap
  delegate_to: "{{ cmk_bootstrap_node }}"

- name: "CMK: ensure config directory exists"
  file:
    path: /root/.cmk
    state: directory
    mode: "770"
    owner: root

- name: "CMK: Install configuration"
  copy:
    dest: "/root/.cmk/config"
    content: "{{ cmk_config_data.stdout | b64decode }}"
    mode: "600"
    owner: root
  when: cmk_has_api_key.stdout | length == 0 and not cmk_bootstrap

- name: "CMK: Set up cloudmonkey"
  shell: "cmk sync"
  changed_when: false # don't care if this changes, not easy to detect

- name: "Set configuration options"
  include_tasks: "cloudstack-set-config.yml"
  vars:
    cmk_config_key: "{{ item.key }}"
    cmk_config_val: "{{ item.val }}"
  when: item.val is defined
  with_items:
    - { key: "cpu.overprovisioning.factor",      val: "{{ cloudstack_cpu_overprovision }}" }
    - { key: "storage.overprovisioning.factor",  val: "{{ cloudstack_disk_overprovision }}" }
    - { key: "secstorage.vm.mtu.size",           val: "{{ ansible_facts[cloudstack_mgmt_interface]['mtu']|default(1500) }}" }
    - { key: "management.network.cidr",          val: "{{ cloudstack_management_subnet }}" }
    - { key: "host",                             val: "{{ cloudstack_management_ips | join(',') }}" }
    - { key: "enable.dynamic.scale.vm",          val: "true" }
    - { key: "ipv6.offering.enabled",            val: "true" }
    - { key: "vm.stats.interval",                val: "60000" }
    - { key: "kvm.vmstoragesnapshot.enabled",    val: "true" }
    - { key: "kvm.snapshot.enabled",             val: "true" }
    - { key: "kvm.auto.convergence",             val: "true" }
    - { key: "kvm.storage.pool.io.policy",       val: "io_uring" }
    - { key: "vpc.max.networks",                 val: "50" }
    - { key: "mem.overprovisioning.factor",      val: "1.25" }
    - { key: "vm.min.memory.equals.memory.divided.by.mem.overprovisioning.factor", val: "false" }
    - { key: "expunged.resources.purge.enabled", val: "true" }
    - { key: "endpoint.url",                     val: "{{ 'https://' ~ cloudstack_hostname ~ '/client/api' }}" }
    - { key: "saml2.enabled",                    val: "{{ 'true' if cloudstack_saml_enable else 'false' }}" }
  run_once: true

- name: "Set SAML options"
  include_tasks: "cloudstack-set-config.yml"
  vars:
    cmk_config_key: "{{ item.key }}"
    cmk_config_val: "{{ item.val }}"
  when: cloudstack_saml_enable
  with_items:
    - { key: "saml2.append.idpdomain", val: "false" }
    - { key: "saml2.check.signature",  val: "true" }
    - { key: "saml2.default.idpid",    val: "{{ cloudstack_saml_metadata_url | urlsplit('hostname') }}" }
    - { key: "saml2.idp.metadata.url", val: "{{ cloudstack_saml_metadata_url }}" }
    - { key: "saml2.redirect.url",     val: "{{ 'https://' ~ cloudstack_hostname ~ '/client' }}" }
    - { key: "saml2.sigalg",           val: "SHA256" }
    - { key: "saml2.sp.id",            val: "org.apache.cloudstack" }
    - { key: "saml2.sp.slo.url",       val: "{{ 'https://' ~ cloudstack_hostname ~ '/client' }}" }
    - { key: "saml2.sp.sso.url",       val: "{{ 'https://' ~ cloudstack_hostname ~ '/client/api?command=samlSso' }}" }
    - { key: "saml2.user.attribute",   val: "{{ cloudstack_saml_user_attribute }}" }
  run_once: true

# Hack since we need to restart on all nodes, but the variable that gets set
# ends up only being visible on one node.
- name: "After configuration changes, may need to restart"
  run_once: true
  when: cmk_config_changed|default(false)
  script: "cloudstack_mgmt_start.sh 1"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['cloudstack_mgmt'] }}"

